/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201907221047.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/commonapi/HelloWorldStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace commonapi {

HelloWorldStubDefault::HelloWorldStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(HelloWorld::getInterfaceVersion()) {
}

const CommonAPI::Version& HelloWorldStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

HelloWorldStubRemoteEvent* HelloWorldStubDefault::initStubAdapter(const std::shared_ptr< HelloWorldStubAdapter> &_adapter) {
    CommonAPI::Stub<HelloWorldStubAdapter, HelloWorldStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

 const bool& HelloWorldStubDefault::getHelloStateAttribute() {
     return helloStateAttributeValue_;
 }

 const bool& HelloWorldStubDefault::getHelloStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getHelloStateAttribute();
 }

 void HelloWorldStubDefault::setHelloStateAttribute(bool _value) {
     std::shared_ptr<HelloWorldStubAdapter> stubAdapter = CommonAPI::Stub<HelloWorldStubAdapter,
     HelloWorldStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockHelloStateAttribute(true);
         const bool valueChanged = (helloStateAttributeValue_ != _value);
         if (valueChanged) {
             helloStateAttributeValue_ = std::move(_value);
             fireHelloStateAttributeChanged(helloStateAttributeValue_);
         }
         stubAdapter->lockHelloStateAttribute(false);
     } else {
         const bool valueChanged = trySetHelloStateAttribute(std::move(_value));
         if (valueChanged) {
             fireHelloStateAttributeChanged(helloStateAttributeValue_);
         }
     }
}

 bool HelloWorldStubDefault::trySetHelloStateAttribute(bool _value) {
     if (!validateHelloStateAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<HelloWorldStubAdapter> stubAdapter = CommonAPI::Stub<HelloWorldStubAdapter, HelloWorldStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockHelloStateAttribute(true);
         valueChanged = (helloStateAttributeValue_ != _value);
         helloStateAttributeValue_ = std::move(_value);
         stubAdapter->lockHelloStateAttribute(false);
     } else {
         valueChanged = (helloStateAttributeValue_ != _value);
         helloStateAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool HelloWorldStubDefault::validateHelloStateAttributeRequestedValue(const bool &_value) {
     (void)_value;
     return true;
 }



void HelloWorldStubDefault::sayHello(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _name, sayHelloReply_t _reply) {
    (void)_client;
    (void)_name;
    std::string message = "";
    _reply(message);
}


void HelloWorldStubDefault::fireHelloBroadcastEvent(const std::string &_message) {
    HelloWorldStub::fireHelloBroadcastEvent(_message);
}


HelloWorldStubDefault::RemoteEventHandler::RemoteEventHandler(HelloWorldStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace commonapi
} // namespace v1
